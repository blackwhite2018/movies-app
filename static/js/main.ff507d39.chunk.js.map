{"version":3,"sources":["components/Search/Search.tsx","components/Search/index.ts","components/NotItems/index.ts","components/NotItems/NotItems.tsx","components/Error/index.ts","components/Error/Error.tsx","config.ts","components/App/App.tsx","components/App/index.ts","index.tsx","Helpers/Function/fetchData.ts","Helpers/Function/strSliceMaxLen.ts","Helpers/Function/debounce.ts","components/ListItem/index.ts","components/ListItem/ListItem.tsx","components/context/Genres.ts","components/List/index.ts","components/List/List.tsx"],"names":["debounceFn","Search","searchData","useState","value","setValue","useEffect","debounce","type","className","placeholder","onChange","evt","target","NotItems","message","Error","description","closable","URL_MOVIES","API_KEY","TabPane","Tabs","navbar","List","lazy","App","error","setError","activeTab","setTabs","films","setFilms","page","setPage","sizePage","setSizePage","currentValueSearch","setCurrentValueSearch","genres","setGenres","sessionID","setSessionID","createGuestSession","a","fetchData","sessionResponse","success","guest_session_id","localStorage","setItem","e","updateFilms","response","splice","reduce","acc","item","newItem","id","shortid","generate","isValid","Date","release_date","format","loadData","data","results","length","loadGenres","genresIds","handleTabs","key","defaultActiveKey","centered","map","index","tab","fallback","Genres","Provider","items","handleChangeRate","fetch","method","headers","body","JSON","stringify","defaultCurrent","defaultPageSize","newPage","pageSize","size","total","render","StrictMode","document","getElementById","url","json","strOrigin","nbr","res","split","str","push","join","fn","ms","timerID","args","clearTimeout","setTimeout","ListItem","rating","original_title","vote_average","overview","genre_ids","poster_path","useContext","classNameAverage","posterPath","process","src","alt","genre_id","name","strSliceMaxLen","count","allowHalf","defaultValue","createContext"],"mappings":"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","file":"static/js/main.ff507d39.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport { debounce } from '../../Helpers';\nimport { SearchDataType } from '../interface';\nimport './index.css';\n\nlet debounceFn: Function;\n\nexport default ({ searchData }: SearchDataType): JSX.Element => {\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    debounceFn = debounce(searchData, 700);\n  }, []);\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>): void => {\n    const target = evt.target as HTMLInputElement;\n    setValue(target.value);\n    debounceFn(target.value);\n  };\n\n  return (\n    <input\n      type=\"search\"\n      className=\"search-input navbar__search-input\"\n      placeholder=\"Type to search...\"\n      value={value}\n      onChange={handleChange}\n    />\n  );\n};\n","import Search from './Search';\n\nexport default Search;\n","import NotItems from './NotItems';\n\nexport default NotItems;\n","import React from 'react';\nimport { NotItems } from '../interface';\n\nexport default ({ message }: NotItems) => <div>{message}</div>;\n","import Error from './Error';\n\nexport default Error;\n","import React from 'react';\nimport { Alert } from 'antd';\n\nexport default () => (\n  <Alert\n    message=\"Error Text\"\n    description=\"Error Description Error Description Error Description Error Description\"\n    type=\"error\"\n    closable\n  />\n);\n","const URL_MOVIES = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = 'e9f559802c673e3e74a73543bc0c8382';\n\nexport { URL_MOVIES, API_KEY };\n","import React, { useState, useEffect, lazy, Suspense } from 'react';\nimport shortid from 'shortid';\nimport { Tabs, Pagination, Spin } from 'antd';\nimport { format, isValid } from 'date-fns';\n\n// components, configure files\nimport { Search as SearchInput, Error, NotItems } from '..';\nimport { FilmItem, ResponseGenres, ResponseFilm, ResponseGuestSession, IGenre } from '../interface';\nimport { fetchData } from '../../Helpers';\nimport Genres from '../context/Genres';\nimport { URL_MOVIES, API_KEY } from '../../config';\n\n// styles\nimport 'antd/dist/antd.css';\nimport './index.css';\n\nconst { TabPane } = Tabs;\n\nconst navbar: Array<string> = ['Search', 'Rated'];\nlet List: any = lazy(() => import('../List'));\n\nconst App: React.FC = () => {\n  const [error, setError] = useState<boolean>(false);\n  const [activeTab, setTabs] = useState<string>('1');\n  const [films, setFilms] = useState<Array<FilmItem>>([]);\n  const [page, setPage] = useState<number>(1);\n  const [sizePage, setSizePage] = useState<number>(10);\n  const [currentValueSearch, setCurrentValueSearch] = useState<string>('');\n  const [genres, setGenres] = useState<Array<IGenre>>([]);\n  const [sessionID, setSessionID] = useState<string>('');\n\n  const createGuestSession = async (): Promise<void> => {\n    const sessionResponse: ResponseGuestSession | null = await fetchData(\n      `${URL_MOVIES}authentication/guest_session/new?api_key=${API_KEY}`\n    );\n\n    if (!sessionResponse) {\n      setError(true);\n      return;\n    }\n\n    const { success, guest_session_id }: ResponseGuestSession = sessionResponse;\n\n    if (success) {\n      try {\n        localStorage.setItem('uuid_session', guest_session_id);\n        setSessionID(guest_session_id);\n      } catch (e) {\n        setError(true);\n      }\n    }\n  };\n\n  const updateFilms = (response: Array<FilmItem>) => {\n    setFilms(\n      response.splice((page - 1) * 10, 10).reduce((acc: Array<FilmItem>, item: FilmItem): Array<FilmItem> => {\n        const newItem = { id: shortid.generate(), ...item };\n        if (!isValid(new Date(item.release_date))) newItem.release_date = '';\n        else newItem.release_date = format(new Date(item.release_date), 'MMMM dd, yyyy');\n        return [...acc, newItem];\n      }, [])\n    );\n  };\n\n  const loadData = async (value: string): Promise<void> => {\n    const data: ResponseFilm | null = await fetchData(\n      `${URL_MOVIES}search/movie?api_key=${API_KEY}&query=${value}&page=${page}`\n    );\n\n    if (data?.success === false) {\n      setError(true);\n      return;\n    }\n\n    if (data) {\n      const { results } = data;\n      if (results) {\n        setSizePage(results.length);\n        updateFilms(results);\n      }\n    } else setError(true);\n  };\n\n  const loadGenres = async () => {\n    const genresIds: ResponseGenres | null = await fetchData(`${URL_MOVIES}genre/movie/list?api_key=${API_KEY}`);\n    if (genresIds) setGenres(genresIds.genres);\n  };\n\n  const handleTabs = async (key: string) => {\n    if (key !== activeTab) {\n      setTabs(key);\n      const response: ResponseFilm | null = await fetchData(\n        `${URL_MOVIES}guest_session/${sessionID}/rated/movies?api_key=${API_KEY}&language=en-US&sort_by=created_at.asc`\n      );\n      switch (key) {\n        case '1':\n          loadData(currentValueSearch);\n          break;\n        case '2':\n          if (response) {\n            const { results } = response;\n            updateFilms(results);\n          }\n          break;\n      }\n    }\n  };\n\n  const searchData = (value: string): void => {\n    if (value === '') setFilms([]);\n    else loadData(value);\n    setCurrentValueSearch(value);\n  };\n\n  const handleChangePagination = (newPage: number, pageSize: any) => {\n    if (page !== newPage) setPage(newPage);\n  };\n\n  const handleChangeRate = (id: number, value: number) => {\n    fetch(`${URL_MOVIES}movie/${id}/rating?api_key=${API_KEY}&guest_session_id=${sessionID}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8',\n      },\n      body: JSON.stringify({ value }),\n    });\n  };\n\n  useEffect(() => {\n    createGuestSession();\n    loadGenres();\n  }, []);\n\n  useEffect(() => {\n    List = lazy(() => import('../List'));\n  }, [films]);\n\n  useEffect(() => {\n    loadData(currentValueSearch);\n  }, [page]);\n\n  if (error) {\n    return <Error />;\n  }\n\n  return (\n    <div className=\"page\">\n      <div className=\"wrapper\">\n        <div className=\"navbar\">\n          <div className=\"navbar-wrapper\">\n            <Tabs defaultActiveKey={activeTab} centered onChange={handleTabs}>\n              {navbar.map((item: string, index: number) => (\n                <TabPane tab={item} key={index + 1} />\n              ))}\n            </Tabs>\n            <SearchInput searchData={searchData} />\n          </div>\n        </div>\n        {films.length === 0 ? (\n          <NotItems message=\"No movies found\" />\n        ) : (\n          <Suspense fallback={<Spin />}>\n            <Genres.Provider value={genres}>\n              <List items={films} activeTab={activeTab} handleChangeRate={handleChangeRate} />\n            </Genres.Provider>\n          </Suspense>\n        )}\n        <Pagination\n          defaultCurrent={page}\n          defaultPageSize={sizePage}\n          onChange={handleChangePagination}\n          size=\"small\"\n          total={sizePage}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import App from './App';\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './components/App';\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","export default async <T>(url: string): Promise<T | null> => {\n  try {\n    const response = await fetch(url);\n    const json = await response.json();\n    return json;\n  } catch (e) {\n    return null;\n  }\n};\n","export default (strOrigin: string, nbr: number): string => {\n  if (strOrigin.length === 0) {\n    return '';\n  }\n  let length: number = 0;\n  const arr: Array<string> = strOrigin.split(' ');\n  const res: Array<string> = arr.reduce((acc: Array<string>, str: string): Array<string> => {\n    if (str.length + length <= nbr) {\n      length += str.length;\n      acc.push(str);\n    }\n    return [...acc];\n  }, []);\n  return `${res.join(' ')}...`;\n};\n","export default (fn: Function, ms: number): Function => {\n  let timerID: any;\n  return (...args: Array<any>) => {\n    clearTimeout(timerID);\n    timerID = setTimeout(() => {\n      timerID = null;\n      fn(...args);\n    }, ms);\n  };\n};\n","import ListItem from './ListItem';\n\nexport default ListItem;\n","import React, { useContext } from 'react';\nimport { Tag, Rate } from 'antd';\n\nimport { IGenre } from '../interface';\n\nimport Genres from '../context/Genres';\nimport { strSliceMaxLen } from '../../Helpers';\nimport './index.css';\n\nconst ratingColor = (rating: number): string => {\n  if (rating >= 0 && rating < 3) return ' rating-color-1';\n  if (rating >= 3 && rating < 5) return ' rating-color-2';\n  if (rating >= 5 && rating < 7) return ' rating-color-3';\n  if (rating >= 7) return ' rating-color-4';\n  return '';\n};\n\nexport default ({\n  id,\n  data: { original_title, release_date, vote_average, overview, genre_ids, poster_path },\n  handleChangeRate,\n  activeTab,\n}: any) => {\n  const genres: Array<IGenre> = useContext<Array<IGenre>>(Genres);\n\n  const classNameAverage = `rating${ratingColor(vote_average)}`;\n\n  const handleChange = (value: number) => {\n    handleChangeRate(id, value);\n  };\n\n  const posterPath = poster_path\n    ? `http://image.tmdb.org/t/p/w440_and_h660_face/${poster_path}`\n    : `${process.env.PUBLIC_URL}/img/img.jpg`;\n\n  return (\n    <div className=\"list-item\">\n      <img src={posterPath} alt=\"The way back\" className=\"poster list-item__poster\" />\n      <div className=\"list-item__container\">\n        <div className=\"list-item__meta\">\n          <h5 className=\"list-item__header\">{original_title}</h5>\n          <time className=\"list-item__date\">{release_date}</time>\n          <div className=\"list-genre list-item__list-genre\">\n            {genre_ids.map((genre_id: number) => genres[genre_id] && <Tag key={genre_id}>{genres[genre_id].name}</Tag>)}\n          </div>\n          <div className={classNameAverage}>{vote_average}</div>\n        </div>\n        <p className=\"list-item__description\">{strSliceMaxLen(overview, 120)}</p>\n        <Rate onChange={handleChange} count={10} allowHalf defaultValue={activeTab === '1' ? 0 : vote_average} />\n      </div>\n    </div>\n  );\n};\n","import { createContext } from 'react';\nimport { IGenre } from '../interface';\n\nconst Genres = createContext<Array<IGenre>>([]);\n\nexport default Genres;\n","import List from './List';\n\nexport default List;\n","import React from 'react';\n\nimport { FilmItem } from '../interface';\nimport ListItem from '../ListItem';\nimport './index.css';\n\nexport default ({ activeTab, items, handleChangeRate }: any) => (\n  <div className=\"list wrapper__list\">\n    {items.map(({ id, original_title, release_date, vote_average, overview, genre_ids, poster_path }: FilmItem) => (\n      <ListItem\n        key={id}\n        id={id}\n        activeTab={activeTab}\n        data={{\n          original_title,\n          release_date,\n          vote_average,\n          overview,\n          genre_ids,\n          poster_path,\n        }}\n        handleChangeRate={handleChangeRate}\n      />\n    ))}\n  </div>\n);\n"],"sourceRoot":""}